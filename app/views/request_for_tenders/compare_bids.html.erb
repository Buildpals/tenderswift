<script src="//rawgit.com/SheetJS/js-xlsx/master/dist/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.css"/>

<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-8">
        <div id="boq-excel">
        </div>

        <div class="content-boq">
            <%= @boq.workbook_data %>
        </div>

        <div class="buttons row">
        </div>

        <span class="item_column">
            <%= get_index_of_alphabet(@boq.item_column.to_s) %>
        </span>

        <span class="rate_column">
            <%= get_index_of_alphabet(@boq.rate_column.to_s) %>
        </span>
        <span class="quantity_column">
            <%= get_index_of_alphabet(@boq.quantity_column.to_s) %>
        </span>
        <span class="amount_column">
            <%= get_index_of_alphabet(@boq.amount_column.to_s) %>
        </span>
        <span class="unit_column">
            <%= get_index_of_alphabet(@boq.unit_column.to_s) %>
        </span>
        <span class="boq_id">
            <%= @boq.id %>
        </span>
        
        <div class="request_for_tender_participants">
            <% @participants.each do |p| %>
                <div class="<%= p.company_name %>">
                    <ul>
                        <% p.rates.each do |r| %>
                            <li row="<%= r.row_number %>" class="<%= r.sheet_name %>"><%= r.value %></li>
                        <% end %>
                    </ul>
                </div>
            <% end %>
        </div>

        <span class="sheet-name"></span>
    </div>
    <div class="col-md-2"></div>
</div>

<script>
    function to_json(workbook) {
        XLSX.SSF.load_table(workbook.SSF);
        var result = {};
        workbook.SheetNames.forEach(function(sheetName) {
            var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {header:1});
            if(roa.length > 0) result[sheetName] = roa;
        });
        return result;
    }


    function process_wb(wb, sheetidx) {
        last_wb = wb;
        var sheet = wb.SheetNames[sheetidx||0];
        var json = to_json(wb)[sheet];
        return json;
    }

    function make_buttons (data, sheetnames) {
        var $buttons = $('.buttons');
        $buttons.html("");
        sheetnames.forEach(function(s,idx) {
            var button= $('<button/>').attr({ type:'button', name:'btn' +idx, text:s });
            button.append('<h5>' + s + '</h5>');
            button.addClass("col-md-2 btn btn-light excel-nav");
            button.click(function() {
                $('.sheet-name').text("");
                $('.sheet-name').text(s);
                display(data, idx); 
            });
            $buttons.each(function(index, element) {
                $(this).append(button);
                $(this).append('<br/>');
            });
        });
    };

    var container = $('#boq-excel');
    var excelData = JSON.parse($('.content-boq').text());
    var listOfParticipants = [];

    function remove(array, element) {
        const index = array.indexOf(element);    
        if (index !== -1) {
            array.splice(index, 1);
        }
    }

    function differenceValueRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        var quantitySurveyorRate = instance.getData()[row][rateColumn-1];
        //(0.05 * 34.00) + 34.00
        quantitySurveyorRate = parseFloat(quantitySurveyorRate);
        if(!isNaN(quantitySurveyorRate) && quantitySurveyorRate != null){
            var fivePercentagePlus = (0.05 * quantitySurveyorRate) + quantitySurveyorRate;
            var fivePercentageMinus = parseFloat(quantitySurveyorRate - (0.05 * quantitySurveyorRate));
            var fifteenPercentagePlus = parseFloat(quantitySurveyorRate + (0.15 * quantitySurveyorRate));
            var fifteenPercentageMinus = parseFloat(quantitySurveyorRate - (0.15 * quantitySurveyorRate));
        }
        //var orangePercentage = 0.15 * quantitySurveyorRate;
        if (parseFloat(value) >= quantitySurveyorRate && parseFloat(value) < fivePercentagePlus){
            td.style.fontStyle = 'italic';
            td.className = 'make-me-green';
        }else if(parseFloat(value) >= fivePercentagePlus && parseFloat(value) <= fifteenPercentagePlus){
            td.style.fontStyle = 'bold';
            td.className = 'make-me-orange';
        }else if(parseFloat(value) > fifteenPercentagePlus){
            td.style.fontStyle = 'bold';
            td.className = 'make-me-red';
        }else if (parseFloat(value) <= quantitySurveyorRate && parseFloat(value) > fivePercentageMinus){
            td.style.fontStyle = 'italic';
            td.className = 'make-me-green';
        }else if(parseFloat(value) >= fivePercentageMinus && parseFloat(value) >= fifteenPercentageMinus){
            td.style.fontStyle = 'bold';
            td.className = 'make-me-orange';
        }else if(parseFloat(value) < fifteenPercentageMinus){
            td.style.fontStyle = 'bold';
            td.className = 'make-me-red';
        }

    }


    Handsontable.renderers.registerRenderer('differenceValueRenderer', differenceValueRenderer);

    function display(data, sheetidx){
        json = process_wb(data, sheetidx);
        if(!json) json = [];
            json.forEach(function(r) { if(json[0].length < r.length) json[0].length = r.length; });

        var unitColumn = parseInt($('.unit_column').text())
        var amountColumn = parseInt($('.amount_column').text());
        var quantityColumn = parseInt($('.quantity_column').text());
        var itemColumn = parseInt($('.item_column').text());
        if(sheetidx == 0){
            $('.sheet-name').text(data.SheetNames[0]);
        }
        var participantRates = new Map();
        
        json.forEach(function(row, index) {
            remove(row,row[amountColumn]);
            remove(row,row[unitColumn]);
            var participantCompanyName;

            if(row[itemColumn] == 'Item' || row[itemColumn] == 'item'){ //if the row has a item header    
                $('.request_for_tender_participants').children().each(function (i, e){
                    participantCompanyName = $(this).attr('class');
                    //console.log(participantCompanyName);
                    row.push(participantCompanyName);
                    listOfParticipants.push(participantCompanyName);
                    firstPartOfCompanyName = participantCompanyName.split(' ')[0];
                    participantRates.set(participantCompanyName, $('.'+firstPartOfCompanyName+'').children().children());
                });
            }

            //console.log(participantRates);
            if(row.length > 3){
                for (var [key, value] of participantRates.entries()) {
                    for(i = 0; i < value.length; i++){
                        if(value[i].className == $('.sheet-name').text()){
                            rowNumber = parseInt(value[i].getAttribute('row')); //get row Number
                            sheetRowNumber = index + 1 //get the actually row number on the excel
                            if(sheetRowNumber == rowNumber){ //check row number
                                participantPostion = listOfParticipants.indexOf(key);
                                if(participantPostion == 0){
                                    row[row.length] = value[i].innerHTML;
                                }else{
                                    row[(row.length - 1) + participantPostion] = value[i].innerHTML;
                                }
                            }
                        }
                    }
                }
            }

        });

        excelTable = new Handsontable(document.getElementById('boq-excel'), {
            data: json,
            startRows: 5,
            startCols: 3,
            stretchH: 'all',
            rowHeaders: true,
            colHeaders: true,
            fixedColumnsLeft: 3,
            colWidths: [30, 20, 500],
            width: function () { return calculateScreenWidth(); },
            height: function () { return calculateScreenHeight(); },
            cells: function(row, col, prop){
                var cellProperties = {};
                rateColumn = parseInt($('.rate_column').text());
                if(col !== rateColumn){
                    cellProperties.readOnly = 'true';
                    cellProperties.contextMenu = 'true';
                }
                if(col >= rateColumn){ 
                    cellProperties.renderer = "differenceValueRenderer"; 
                }
                return cellProperties;
            },
            afterInit: function(){
            }
        });
        make_buttons(data, data.SheetNames);
    }

    display(excelData, 0);

</script>