<!DOCTYPE html>
<html lang="en">

<%= render 'layouts/head' %>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <%= link_to root_path, class: 'navbar-brand' do %>
    <%= image_tag 'buildpals-logo-small-inverse.png', style: 'height: 28px; margin-top: 0px;',
                  alt: 'buildpals - connecting contractors to project leads' %>
  <% end %>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
    </ul>
    <a class="btn btn-outline-warning mr-sm-2 my-sm-0" href="#">Back</a>
    <%= form_with(model: @required_document_upload, url: update_bid_url, local: true, class: 'form-inline') do |form| %>
      <%= form.text_field :status, value: 'approve', id: :required_document_upload_id, type: 'hidden' %>
      <%= form.submit 'Approve', class: 'btn btn-outline-success mr-sm-2 my-sm-0' %>
    <% end %>
    <%= form_with(model: @required_document_upload, url: update_bid_url, local: true, class: 'form-inline') do |form| %>
      <%= form.text_field :status, value: 'issue', id: :required_document_upload_id, type: 'hidden' %>
      <%= form.submit 'Mark Issue', class: 'btn btn-outline-danger mr-sm-2 my-sm-0' %>
    <% end %>
  </div>
</nav>

<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>


<div class="container-fluid">
  <div class="row">
    <div class="col-lg-12 mx-auto">
      <div class="card-header">
        <h3><%= @required_document_upload.required_document.title %></h3>
        <button class="btn btn-default" id="prev">Previous</button>
        <button class="btn btn-secondary" id="next">Next</button>
        &nbsp; &nbsp;
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
      </div>
      <div class="card-body text-center">
        <canvas id="the-canvas"></canvas>
      </div>
    </div>
  </div>
</div>


<script>
  // If absolute URL from the remote server is provided, configure the CORS
  // header on that server.
  var url = '<%= @required_document_upload.document.url %>';

  PDFJS.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

  var pdfDoc = null,
    pageNum = 1,
    pageRendering = false,
    pageNumPending = null,
    scale = 1.0,
    canvas = document.getElementById('the-canvas'),
    ctx = canvas.getContext('2d');

  /**
   * Get page info from document, resize canvas accordingly, and render page.
   * @param num Page number.
   */
  function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function(page) {
      var viewport = page.getViewport(scale);
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(function() {
        pageRendering = false;
        if (pageNumPending !== null) {
          // New page rendering is pending
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });

    // Update page counters
    document.getElementById('page_num').textContent = num;
  }

  /**
   * If another page rendering in progress, waits until the rendering is
   * finised. Otherwise, executes rendering immediately.
   */
  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }

  /**
   * Displays previous page.
   */
  function onPrevPage() {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  }
  document.getElementById('prev').addEventListener('click', onPrevPage);

  /**
   * Displays next page.
   */
  function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  }
  document.getElementById('next').addEventListener('click', onNextPage);

  /**
   * Asynchronously downloads PDF.
   */
  PDFJS.getDocument(url).then(function(pdfDoc_) {
    pdfDoc = pdfDoc_;
    document.getElementById('page_count').textContent = pdfDoc.numPages;

    // Initial/first page rendering
    renderPage(pageNum);
  });
</script>