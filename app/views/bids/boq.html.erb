<script src="//rawgit.com/SheetJS/js-xlsx/master/dist/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.css"/>
<div class="container-fuild" id="app">
  <div class="row">

    <div class="col-lg-12 mx-auto pt-4">
      <%= render 'layouts/notice' %>
    </div>

    <div class="col-lg-12 mx-auto">
      <div class="card mb-4">
        <div class="card-header">
          Bill of Quantities
        </div>

        <div class="card-body participant-boq-body">
            <div id="boq-excel">
            </div>

            <div class="content-boq">
                <%= @participant.boq.workbook_data %>
            </div>

            <div class="buttons row">
            </div>
            <span class="rate_column">
                <%= get_index_of_alphabet(@participant.boq.rate_column.to_s) %>
            </span>
            <span class="quantity_column">
                <%= get_index_of_alphabet(@participant.boq.quantity_column.to_s) %>
            </span>
            <span class="amount_column">
                <%= get_index_of_alphabet(@participant.boq.amount_column.to_s) %>
            </span>
            <span class="item_column">
                <%= get_index_of_alphabet(@participant.boq.item_column.to_s) %>
            </span>
            <span class="boq_id">
                <%= @participant.boq.id %>
            </span>
            <span class="participant_id"><%= @participant.id %></span>
            <span class="sheet-name"></span>
        </div>

      </div>
    </div>

  </div>

</div>
<script>
    function calculateScreenWidth (){
        return window.innerWidth * 1/2;
    }

    function to_json(workbook) {
        XLSX.SSF.load_table(workbook.SSF);
        var result = {};
        workbook.SheetNames.forEach(function(sheetName) {
            var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {header:1});
            if(roa.length > 0) result[sheetName] = roa;
        });
        return result;
    }


    function process_wb(wb, sheetidx) {
        last_wb = wb;
        var sheet = wb.SheetNames[sheetidx||0];
        var json = to_json(wb)[sheet];
        return json;
    }

    function remove(array, element) {
        const index = array.indexOf(element);    
        if (index !== -1) {
            array.splice(index, 1);
        }
    }

    function make_buttons (data, sheetnames) {
        var $buttons = $('.buttons');
        $buttons.html("");
        sheetnames.forEach(function(s,idx) {
            var button= $('<button/>').attr({ type:'button', name:'btn' +idx, text:s });
            button.append('<h5>' + s + '</h5>');
            button.addClass("col-md-2 btn btn-primary excel-nav");
            button.click(function() {
                $('.sheet-name').text("");
                $('.sheet-name').text(s);
                $('#boq-excel').text("");
                displaySheet(data, idx); 
            });
            $buttons.each(function(index, element) {
                $(this).append(button);
                $(this).append('<br/>');
            });
        });
    };
    var contractorRates = [];

    function displaySheet (data, sheetidx){
        json = process_wb(data, sheetidx);
        if(!json) json = [];
            json.forEach(function(r) { if(json[0].length < r.length) json[0].length = r.length; });

        var rateColumn = parseInt($('.rate_column').text()) - 1;
        var amountColumn = parseInt($('.amount_column').text()) -1;
        var itemColumn = parseInt($('.item_column').text());
        var quantityColumn = parseInt($('.quantity_column').text()) -1;

        if(sheetidx == 0){
            $('.sheet-name').text(data.SheetNames[0]);
        }

        json.forEach(function(row){
            remove(row, row[amountColumn]);
            remove(row, row[rateColumn]);
            if(row[itemColumn] == 'Item' || row[itemColumn] == 'item'){
                row.push('Rate');
                row.push('Amount');
            }
        });

        excelTable = new Handsontable(document.getElementById('boq-excel'), {
            data: json,
            startRows: 5,
            startCols: 3,
            stretchH: 'all',
            rowHeaders: true,
            colHeaders: true,
            cells: function(row, col, prop){
                var cellProperties = {};
                rateColumn = parseInt($('.rate_column').text()) - 1;
                cellProperties.readOnly = 'true';
                cellProperties.contextMenu = 'true';
                return cellProperties;
            },
            afterInit: function(){
                $.ajax({
                    url: "/rates/",
                    type: "GET",
                    data: { 
                        rate: {
                                boq_id: parseInt($('.boq_id').text()),
                                participant_id: parseInt($('.participant_id').text())
                                }
                        },
                    success: function(response){ 
                        if (response.length > 0){
                            for(i=0; i < response.length; i++){
                                result = response[i];
                                const contractorRate = new Object();
                                contractorRate.quantity = result.quantity;
                                contractorRate.value = result.value;
                                contractorRate.sheetName = result.sheet_name;
                                contractorRate.rowNumber = result.row_number;
                                contractorRate.participantId = result.participant_id;
                                contractorRates.push(contractorRate);
                                if(contractorRate.sheetName == $('.sheet-name').text()){
                                    row_number = parseInt(response[i].row_number) - 1;
                                    quantity = json[row_number][quantityColumn];
                                    rate = parseFloat(response[i].value);
                                    json[row_number][rateColumn] = rate;
                                    json[row_number][amountColumn] = parseInt(quantity) * parseFloat(rate);
                                    excelTable.loadData(json);
                                }
                            }
                        }
                    },
                    error: function(response){
                        console.log(response);
                    }
                });
            },
        });
        make_buttons(data, data.SheetNames);
    }


    var container = $('#boq-excel');
    var excelData = JSON.parse($('.content-boq').text());
    displaySheet(excelData, 0);
</script>