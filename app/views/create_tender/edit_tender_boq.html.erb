<%= form_with model: @request,
              scope: :request_for_tender,
              url: update_tender_boq_path(@request),
              method: :patch,
              id: 'request-form' do |form| %>

    <p class="text-muted small">
        Upload the Bill of Quantities for the project or create one using the templates provided.
        <button type="button" class="btn btn-info pull-right" data-toggle="modal" data-target="#qunatityColumnModal">
            Set Quantity Column
        </button>
    </p>

    <%= form.text_field :project_name, type: 'hidden' %>

    <% if @request.boq %>
        <div id="content-boq">
            <%= @request.boq.workbook_data %>
        </div>
    <% end %>
    <div id="boq-excel"></div>
    
    <div class="buttons row"></div>
    

    <div class="mb-4 text-center">
      <% if @request.boq %>
          <p class="small">
            If you don't like the Bill Of Quantities above,
            <br>
            you can upload a different one using the button below.
          </p>
      <% else %>
          <p class="text-center text-muted small">
            Upload a bill of quantities by choosing an excel file from your computer using the 'Choose File' button,
            <br>
            and clicking the 'Save' button thereafter.
            <br>
            You'll be able to edit the bill of quantities after uploading it.
          </p>
      <% end %>
      <%= form.fields_for :boq do |boq_field| %>
        <%= boq_field.text_field :workbook_data, id: 'workbook-data', type: 'hidden' %>
      <% end %>
      <%= form.file_field :document, id: 'upload-boq', class: 'form-control-file btn btn-sm btn-primary'%>
    </div>


    <!-- Setting Quantity Modal -->
    <div class="modal fade" id="qunatityColumnModal" tabindex="-1" role="dialog" aria-labelledby="qunatityColumnModallLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="qunatityColumnModalLabel">Tell us where you put the quantity column</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Which of the columns contain the 'Quantity' field in your Bill of Quantity.</p> 
                    <%= form.fields_for :boq do |boq_field| %>
                        <%= boq_field.select :quantity_column, ('A'...'Z').map { |i| [i,i] }, {}, { class: 'form-control' } %>
                        <br/>
                        <p class="text-muted small">Don't remind me of this again. <%= boq_field.check_box :remind_me %></p>
                    <% end %>
                </div>
                <div class="modal-footer">
                    <button type="button" id="set-quantity-column" class="btn btn-secondary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

<% end %>



<script src="//rawgit.com/SheetJS/js-xlsx/master/dist/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/handsontable/0.34.5/handsontable.min.css">


<script>

$('#set-quantity-column').click( function(e){
    //set the quantity column
    $('#request-form').submit();
    $('#qunatityColumnModal').modal('hide');
});

var rABS = true; // true: readAsBinaryString ; false: readAsArrayBuffer
function handleFile(e) {
  var files = e.target.files, f = files[0];
  var reader = new FileReader();
  reader.onload = function(e) {
    var data = e.target.result;
    if(!rABS) data = new Uint8Array(data);
    var workbook = XLSX.read(data, {type: rABS ? 'binary' : 'array'}); //read workbook
    console.log(data);
    var parsedJson = JSON.stringify(workbook);
    $('#workbook-data').val(parsedJson);
    parsedJson = JSON.parse(parsedJson);
    $('#request-form').submit(); //submit form to save json data in DB;
  };
  if(rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);
}
var uploadBoqButton = document.getElementById('upload-boq');
uploadBoqButton.addEventListener('change', handleFile, false);

$(document).ready(function(e){
    data = JSON.parse($("#content-boq").text());

    var calculateScreenHeight = function(){
        return window.innerHeight;
    }

    var calculateScreenWidth = function(){
        return window.innerWidth * 2/3;
    }

  /* make the buttons for the sheet names for good navigation */
    var make_buttons = function(sheetnames) {
        var $buttons = $('.buttons');
        $buttons.html("");
        sheetnames.forEach(function(s,idx) {
            var button= $('<button/>').attr({ type:'button', name:'btn' +idx, text:s });
            button.append('<h3>' + s + '</h3>');
            button.addClass("col-md-2 btn btn-light excel-nav");
            button.click(function() { displaySheet(idx); });
            $buttons.each(function(index, element) {
                $(this).append(button);
                $(this).append('<br/>');
            });
        });
    };

    /* Turn workbook to json object */
	function to_json(workbook) {
		XLSX.SSF.load_table(workbook.SSF);
		var result = {};
		workbook.SheetNames.forEach(function(sheetName) {
			var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {header:1});
			if(roa.length > 0) result[sheetName] = roa;
		});
		return result;
	}
    /* process workbook to be viewable with
        handsontable. We can pass an index to tell
        us where exactly we should start reading from. 
    */
    function process_wb(wb, sheetidx) {
        last_wb = wb;
        var sheet = wb.SheetNames[sheetidx||0];
        var json = to_json(wb)[sheet];
        return json;
    }
    var container = document.getElementById('boq-excel');
    var json;
    var excelTable;
    
    /*  Display Sheet to the screen
    */
    var displaySheet = function(sheetidx){
        json = process_wb(data, sheetidx);
        if(!json) json = [];
            json.forEach(function(r) { if(json[0].length < r.length) json[0].length = r.length; });
    
        excelTable = new Handsontable(document.getElementById('boq-excel'), {
            data: json,
            startRows: 5,
            startCols: 3,
            stretchH: 'all',
            rowHeaders: true,
            colHeaders: true,
            width: function () { return calculateScreenWidth(); },
            height: function () { return calculateScreenHeight(); },
            stretchH: 'all'
        });
        make_buttons(data.SheetNames);
    }
    
    displaySheet(0);
    var remind_me = <%= @request.boq.remind_me %>;
    console.log(remind_me);
    if(remind_me != true){
        $('#qunatityColumnModal').modal('show');
    }
});
</script>